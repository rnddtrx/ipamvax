/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package be.ipam.IpamVax.api;

import be.ipam.IpamVax.api.model.People;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "People", description = "the People API")
public interface PeopleApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PUT /api/v1/people : Create the patient
     * create the people
     *
     * @param people people object (optional)
     * @return Created (status code 201)
     */
    @ApiOperation(value = "Create the patient", nickname = "createUser", notes = "create the people", tags={ "People", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created") })
    @RequestMapping(value = "/api/v1/people",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<People> createUser(@ApiParam(value = "people object"  )  @Valid @RequestBody(required = false) People people) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/people/{peopleId} : Delete the patient
     * Delete a patient
     *
     * @param peopleId people Identifier (required)
     * @return No content (status code 204)
     */
    @ApiOperation(value = "Delete the patient", nickname = "deletePeopleById", notes = "Delete a patient", tags={ "People", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No content") })
    @RequestMapping(value = "/api/v1/people/{peopleId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deletePeopleById(@ApiParam(value = "people Identifier",required=true) @PathVariable("peopleId") Integer peopleId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/people/{peopleId} : Get a patient
     * Get a patient
     *
     * @param peopleId People Identifier (required)
     * @return successful operation (status code 200)
     *         or Given user ID doesn&#39;t exist (status code 404)
     */
    @ApiOperation(value = "Get a patient", nickname = "getPeopleById", notes = "Get a patient", response = People.class, tags={ "People", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = People.class),
        @ApiResponse(code = 404, message = "Given user ID doesn't exist") })
    @RequestMapping(value = "/api/v1/people/{peopleId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<People> getPeopleById(@ApiParam(value = "People Identifier",required=true) @PathVariable("peopleId") Integer peopleId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstname\" : \"firstname\", \"placeOfBirth\" : \"placeOfBirth\", \"dateOfBirth\" : \"dateOfBirth\", \"lastname\" : \"lastname\", \"addressPostalCode\" : \"addressPostalCode\", \"password\" : \"password\", \"peopleId\" : 0.8008281904610115, \"nationalNumber\" : \"nationalNumber\", \"countryOfBirth\" : \"countryOfBirth\", \"addressStreet\" : \"addressStreet\", \"peopleSchedules\" : [ { \"vaxCentre\" : { \"vaxCentreId\" : 1.4658129805029452, \"peopleSchedules\" : [ null, null ] }, \"startTime\" : \"startTime\", \"scheduleId\" : 6.027456183070403 }, { \"vaxCentre\" : { \"vaxCentreId\" : 1.4658129805029452, \"peopleSchedules\" : [ null, null ] }, \"startTime\" : \"startTime\", \"scheduleId\" : 6.027456183070403 } ], \"addressNumber\" : \"addressNumber\", \"addressCity\" : \"addressCity\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/people/{peopleId} : Create the patient
     * update the people
     *
     * @param peopleId people Identifier (required)
     * @param people people object (optional)
     * @return Updated (status code 200)
     */
    @ApiOperation(value = "Create the patient", nickname = "updateUser", notes = "update the people", tags={ "People", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated") })
    @RequestMapping(value = "/api/v1/people/{peopleId}",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> updateUser(@ApiParam(value = "people Identifier",required=true) @PathVariable("peopleId") Integer peopleId,@ApiParam(value = "people object"  )  @Valid @RequestBody(required = false) People people) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
